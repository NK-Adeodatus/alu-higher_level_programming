#!/usr/bin/python3
"""
Unittest for 2-matrix_divided.txt
"""


import unittest
from 2-matrix_divided import matrix_divided

class TestMatrixDivided(unittest.TestCase):
    """Unit tests for matrix_divided function"""

    def test_valid_matrices(self):
	"""Test division with valid matrices"""
	self.assertEqual(matrix_divided([[1, 2, 3], [4, 5, 6]], 3), [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]])
	self.assertEqual(matrix_divided([[1.5, 2.5], [3.5, 4.5]], 0.5), [[3.0, 5.0], [7.0, 9.0]])
	self.assertEqual(matrix_divided([[4, 8], [16, 32]], 4), [[1.0, 2.0], [4.0, 8.0]])

    def test_matrix_with_integers_and_floats(self):
	"""Test matrix with mixed integers and floats"""
	self.assertEqual(matrix_divided([[1, 2.5], [3, 4.5]], 2), [[0.5, 1.25], [1.5, 2.25]])

    def test_invalid_matrix(self):
	"""Test with invalid matrix inputs"""
	with self.assertRaises(TypeError):
	    matrix_divided("not a matrix", 2)
	with self.assertRaises(TypeError):
	    matrix_divided([[1, 2], [3, "4"]], 2)
	with self.assertRaises(TypeError):
	    matrix_divided([[1, 2], [3]], 2)

    def test_invalid_divisor(self):
	"""Test with invalid divisor"""
	with self.assertRaises(TypeError):
	    matrix_divided([[1, 2], [3, 4]], "div")
	with self.assertRaises(ZeroDivisionError):
	    matrix_divided([[1, 2], [3, 4]], 0)

    def test_matrix_unchanged(self):
	"""Test that the original matrix is not modified"""
	matrix = [[1, 2, 3], [4, 5, 6]]
	result = matrix_divided(matrix, 2)
	self.assertNotEqual(matrix, result)
	self.assertEqual(matrix, [[1, 2, 3], [4, 5, 6]])

    def test_edge_cases(self):
	"""Test edge cases with small and large numbers"""
	self.assertEqual(matrix_divided([[0, 0], [0, 0]], 1), [[0.0, 0.0], [0.0, 0.0]])
	self.assertEqual(matrix_divided([[1e6, 2e6], [3e6, 4e6]], 1e6), [[1.0, 2.0], [3.0, 4.0]])

if __name__ == "__main__":
    unittest.main()
