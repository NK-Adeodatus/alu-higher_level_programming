#!/usr/bin/python3
"""
Unittest for say_my_name function
"""


import unittest
from 3-say_my_name import say_my_name
from io import StringIO
import sys


class TestSayMyName(unittest.TestCase):
    """Test cases for the say_my_name function"""

    def setUp(self):
        """Set up a StringIO object to capture print output"""
        self.output = StringIO()
        sys.stdout = self.output

    def tearDown(self):
        """Restore the standard output after tests"""
        sys.stdout = sys.__stdout__

    def test_valid_names(self):
        """Test with valid names"""
        say_my_name("John", "Smith")
        self.assertEqual(self.output.getvalue().strip(), "My name is John Smith")

        self.output.truncate(0)
        self.output.seek(0)
        say_my_name("Alice", "Johnson")
        self.assertEqual(self.output.getvalue().strip(), "My name is Alice Johnson")

    def test_only_first_name(self):
        """Test with only the first name"""
        say_my_name("Bob")
        self.assertEqual(self.output.getvalue().strip(), "My name is Bob")

    def test_empty_names(self):
        """Test with empty strings"""
        say_my_name("")
        self.assertEqual(self.output.getvalue().strip(), "My name is")

        self.output.truncate(0)
        self.output.seek(0)
        say_my_name("", "")
        self.assertEqual(self.output.getvalue().strip(), "My name is")

    def test_invalid_first_name(self):
        """Test with invalid first_name"""
        with self.assertRaises(TypeError):
            say_my_name(12, "Smith")

    def test_invalid_last_name(self):
        """Test with invalid last_name"""
        with self.assertRaises(TypeError):
            say_my_name("Alice", 123)


if __name__ == "__main__":
    unittest.main()
