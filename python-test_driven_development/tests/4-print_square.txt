#!/usr/bin/python3
"""
Unit test for the 4 print square file
"""


import unittest
from io import StringIO
import sys
from 4-print_square import print_square

class TestPrintSquare(unittest.TestCase):
    """Unit test cases for print_square function"""

    def setUp(self):
        """Redirect stdout to capture printed output for validation"""
        self.held_output = StringIO()
        sys.stdout = self.held_output

    def tearDown(self):
        """Restore stdout after each test"""
        sys.stdout = sys.__stdout__

    def test_square_size_4(self):
        """Test printing a square of size 4"""
        print_square(4)
        self.assertEqual(self.held_output.getvalue(), "####\n####\n####\n####\n")

    def test_square_size_1(self):
        """Test printing a square of size 1"""
        print_square(1)
        self.assertEqual(self.held_output.getvalue(), "#\n")

    def test_square_size_0(self):
        """Test printing a square of size 0 (should print nothing)"""
        print_square(0)
        self.assertEqual(self.held_output.getvalue(), "")

    def test_negative_size(self):
        """Test negative size raises ValueError"""
        with self.assertRaises(ValueError) as e:
            print_square(-1)
        self.assertEqual(str(e.exception), "size must be >= 0")

    def test_float_size(self):
        """Test float size raises TypeError"""
        with self.assertRaises(TypeError) as e:
            print_square(2.5)
        self.assertEqual(str(e.exception), "size must be an integer")

    def test_string_size(self):
        """Test string size raises TypeError"""
        with self.assertRaises(TypeError) as e:
            print_square("3")
        self.assertEqual(str(e.exception), "size must be an integer")

    def test_list_size(self):
        """Test list size raises TypeError"""
        with self.assertRaises(TypeError) as e:
            print_square([3])
        self.assertEqual(str(e.exception), "size must be an integer")

if __name__ == "__main__":
    unittest.main()


